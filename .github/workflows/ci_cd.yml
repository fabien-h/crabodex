name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    outputs:
      continue: ${{ steps.continue.outputs.continue }}
    steps:
      - id: continue
        run: echo "continue=true" >> $GITHUB_OUTPUT

  test:
    name: Run Tests
    needs: pre_ci
    if: needs.pre_ci.outputs.continue
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Run tests
        run: cargo test --verbose
        id: run_tests

      - name: Update README test badge
        run: |
          if [ "${{ steps.run_tests.outcome }}" == "success" ]; then
            sed -i 's/tests-failing-red/tests-passing-green/g' README.md
          else
            sed -i 's/tests-passing-green/tests-failing-red/g' README.md
          fi
          git pull
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add README.md
          git commit -m "Update tests badge in README [skip ci]" || echo "No changes to commit"
          git push || echo "No changes to push"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy,rustc-dev
      - run: cargo clippy --all-features --tests --benches -- -Dclippy::all -Dclippy::pedantic

  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: dtolnay/install@cargo-outdated
      - run: cargo outdated --workspace --exit-code 1

  build:
    name: Build Project
    needs: [test, clippy, outdated]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: crabodex
            asset_name: crabodex-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: crabodex
            asset_name: crabodex-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: crabodex
            asset_name: crabodex-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: crabodex
            asset_name: crabodex-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: crabodex.exe
            asset_name: crabodex-windows-amd64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: crabodex.exe
            asset_name: crabodex-windows-arm64.exe
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --verbose --bin crabodex_cli --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        id: build

      - name: Rename binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            mv target/${{ matrix.target }}/release/crabodex_cli.exe target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          else
            mv target/${{ matrix.target }}/release/crabodex_cli target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi

      - name: List build artifacts
        run: |
          echo "Contents of target/release:"
          ls -l target/release

      - name: Update README build badge
        shell: pwsh
        run: |
          if ("${{ steps.build.outcome }}" -eq "success") {
            if ($IsWindows) {
              (Get-Content README.md) -replace 'build-failing-red', 'build-passing-green' | Set-Content README.md
            } elseif ($IsMacOS) {
              sed -i '' 's/build-failing-red/build-passing-green/g' README.md
            } else {
              sed -i 's/build-failing-red/build-passing-green/g' README.md
            }
          } else {
            if ($IsWindows) {
              (Get-Content README.md) -replace 'build-passing-green', 'build-failing-red' | Set-Content README.md
            } elseif ($IsMacOS) {
              sed -i '' 's/build-passing-green/build-failing-red/g' README.md
            } else {
              sed -i 's/build-passing-green/build-failing-red/g' README.md
            }
          }
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add README.md
          git commit -m "Update build badge in README [skip ci]" -m "Automated commit by GitHub Actions" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref }} || echo "No changes to push"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name="v${{ github.run_number }}"
          release_name="Release ${{ github.run_number }}"
          
          assets=()
          for file in artifacts/*; do
            if [ -f "$file" ]; then
              assets+=("$file")
            fi
          done
          
          gh release create "$tag_name" \
            --title "$release_name" \
            --notes "Automated release for build ${{ github.run_number }}" \
            "${assets[@]}"
